{"version":3,"sources":["../src/error.ts"],"sourcesContent":["import httpStatus from \"http-status\";\nimport { Logger } from \"./logger\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { ErrorRes } from \"./errorHandler\";\n\nexport class ErrorFactory {\n  constructor(public nodeEnv: string | number) {}\n\n  /**\n   * @param err {Error}\n   * @variable error  initilazes  ErrorRes{class} and sends to express' NextFunction\n   */\n\n  // instantitate {Logger} class with the nodeEnv passed by the user\n  protected logger = new Logger(String(this.nodeEnv));\n\n  public errorConverter = (\n    err: Error,\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ) => {\n    let error = err;\n    // TODO: include mongoose type error check here\n    if (!(error instanceof ErrorRes)) {\n      // @ts-expect-error\n      const statusCode = error.statusCode\n        ? httpStatus.BAD_REQUEST\n        : httpStatus.INTERNAL_SERVER_ERROR;\n      const message = error.message || httpStatus[statusCode];\n\n      error = new ErrorRes(statusCode, message.toString(), false, err.stack);\n    }\n    next(error);\n  };\n\n  public errorHandler = (\n    err: ErrorRes,\n    req: Request,\n    res: Response,\n    next: NextFunction\n  ) => {\n    let { statusCode, message } = err;\n\n    if (this.nodeEnv === \"production\" && !err.isOperational) {\n      statusCode = httpStatus.INTERNAL_SERVER_ERROR;\n      message = String(httpStatus[httpStatus.INTERNAL_SERVER_ERROR]);\n    }\n\n    res.locals.errorMessage = err.message;\n\n    const response = {\n      code: statusCode,\n      message,\n      ...(this.nodeEnv === \"development\" && { stack: err.stack }),\n    };\n\n    if (this.nodeEnv === \"development\") {\n      this.logger.logger.error(err);\n    }\n\n    res.status(statusCode).send(response);\n  };\n}\n"],"names":["ErrorFactory","constructor","nodeEnv","logger","Logger","String","errorConverter","err","req","res","next","error","ErrorRes","statusCode","httpStatus","BAD_REQUEST","INTERNAL_SERVER_ERROR","message","toString","stack","errorHandler","isOperational","locals","errorMessage","response","code","status","send"],"mappings":"AAAA;;;;+BAKaA;;aAAAA;;mDALU;wBACA;8BAEE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElB,IAAA,AAAMA,eAAN,MAAMA;IACXC,YAAmBC,QAA0B;uBAA1BA;aAQTC,SAAS,IAAIC,cAAM,CAACC,OAAO,IAAI,CAACH,OAAO;aAE1CI,iBAAiB,CACtBC,KACAC,KACAC,KACAC,OACG;YACH,IAAIC,QAAQJ;YAEZ,IAAI,CAAEI,CAAAA,iBAAiBC,sBAAQ,AAAD,GAAI;gBAEhC,MAAMC,aAAaF,MAAME,UAAU,GAC/BC,mBAAU,CAACC,WAAW,GACtBD,mBAAU,CAACE,qBAAqB;gBACpC,MAAMC,UAAUN,MAAMM,OAAO,IAAIH,mBAAU,CAACD,WAAW;gBAEvDF,QAAQ,IAAIC,sBAAQ,CAACC,YAAYI,QAAQC,QAAQ,IAAI,KAAK,EAAEX,IAAIY,KAAK;YACvE,CAAC;YACDT,KAAKC;QACP;aAEOS,eAAe,CACpBb,KACAC,KACAC,KACAC,OACG;YACH,IAAI,EAAEG,WAAU,EAAEI,QAAO,EAAE,GAAGV;YAE9B,IAAI,IAAI,CAACL,OAAO,KAAK,gBAAgB,CAACK,IAAIc,aAAa,EAAE;gBACvDR,aAAaC,mBAAU,CAACE,qBAAqB;gBAC7CC,UAAUZ,OAAOS,mBAAU,CAACA,mBAAU,CAACE,qBAAqB,CAAC;YAC/D,CAAC;YAEDP,IAAIa,MAAM,CAACC,YAAY,GAAGhB,IAAIU,OAAO;YAErC,MAAMO,WAAW;gBACfC,MAAMZ;gBACNI;eACI,IAAI,CAACf,OAAO,KAAK,iBAAiB;gBAAEiB,OAAOZ,IAAIY,KAAK;YAAC;YAG3D,IAAI,IAAI,CAACjB,OAAO,KAAK,eAAe;gBAClC,IAAI,CAACC,MAAM,CAACA,MAAM,CAACQ,KAAK,CAACJ;YAC3B,CAAC;YAEDE,IAAIiB,MAAM,CAACb,YAAYc,IAAI,CAACH;QAC9B;IAxD8C;AAyDhD"}