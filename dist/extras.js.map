{"version":3,"sources":["../src/extras.ts"],"sourcesContent":["import { NextFunction, Request, Response, Router, Application } from \"express\";\nimport httpStatus from \"http-status\";\nimport { catchAsync as async } from \"catchAsync\";\n\nimport {\n  Schema as MongoSchema,\n  Model,\n  Collection as MongoCollection,\n  MongooseError as MongoError,\n  ConnectOptions,\n  Document,\n} from \"mongoose\";\nimport { ErrorRes } from \"errorHandler\";\n\nexport interface IOwlMongooseD extends Document {}\nexport const MongooseSchema = MongoSchema;\nexport const MongooseModel = Model;\nexport interface MongooseCollection extends MongoCollection {}\nexport const MongooseError = MongoError;\n\nexport const apiStatus: httpStatus.HttpStatus = httpStatus;\nexport const catchAsync: TypeCatchAsync = async;\nexport const errorRes: typeof ErrorRes = ErrorRes;\n\nexport const OwlRouter = Router;\nexport type TypeOwlRouter = Router;\n\nexport type TypeOwlResponse = Response;\nexport type TypeOwlRequest = Request;\nexport type TypeOwlNextFunc = NextFunction;\nexport type TypeCatchAsync = (\n  fn: any\n) => (req: Request, res: Response, next: NextFunction) => void;\nexport type TypeInjectable = Application;\n\nexport interface OwlRoute {\n  path?: string;\n  router: TypeOwlRouter;\n}\n\nexport type MongoParam = {\n  url: string;\n  options: ConnectOptions;\n};\n"],"names":["MongooseSchema","MongooseModel","MongooseError","apiStatus","catchAsync","errorRes","OwlRouter","MongoSchema","Model","MongoError","httpStatus","async","ErrorRes","Router"],"mappings":"AAAA;;;;;;;;;;;IAeaA,cAAc,MAAdA;IACAC,aAAa,MAAbA;IAEAC,aAAa,MAAbA;IAEAC,SAAS,MAATA;IACAC,UAAU,MAAVA;IACAC,QAAQ,MAARA;IAEAC,SAAS,MAATA;;yBAxBwD;mDAC9C;4BACa;0BAS7B;8BACkB;;;;;;AAGlB,MAAMN,iBAAiBO,gBAAW;AAClC,MAAMN,gBAAgBO,eAAK;AAE3B,MAAMN,gBAAgBO,uBAAU;AAEhC,MAAMN,YAAmCO,mBAAU;AACnD,MAAMN,aAA6BO,sBAAK;AACxC,MAAMN,WAA4BO,sBAAQ;AAE1C,MAAMN,YAAYO,eAAM"}