{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import express, { Application } from \"express\";\nimport { connect, set } from \"mongoose\";\n\nimport { MorganFactory } from \"./morganConf\";\nimport { ErrorFactory } from \"./error\";\nimport { Logger } from \"./logger\";\n\nimport { MongoParam, OwlRoute } from \"./extras\";\n\nexport class OwlFactory {\n  public app: Application;\n  public env: string;\n  public port: string | number;\n  private errorFactory: ErrorFactory;\n  private morgan: MorganFactory;\n  private logger: Logger;\n\n  // Note: app wouold only work with mongodbfor now cause it's passed thrugh the cnstructor\n  constructor(\n    routes: OwlRoute[],\n    nodeEnv: string,\n    port?: number | string,\n    mongo?: MongoParam\n  ) {\n    this.app = express();\n    /**\n     * @param nodeEnv can receive either  values of parameters \"development\" or \"production\"  or \"test\" but default is set to \"development\"\n     */\n    this.env = nodeEnv || \"development\";\n    this.port = port || 8181;\n    this.errorFactory = new ErrorFactory(nodeEnv);\n    this.logger = new Logger(nodeEnv);\n    this.morgan = new MorganFactory();\n\n    this.initMongoDatabase(mongo.url, mongo.options);\n    // TODO: pass array through this method to initialize middlewares from outside\n    this.initMiddlewares();\n    this.initRoutes(routes);\n    this.ErrorHandling();\n  }\n\n  public Server() {\n    return this.app;\n  }\n\n  // supports mongoose\n  public initMongoDatabase(url: string, options: any) {\n    // checks if the connection string is of mongodb\n    const m_tring = url.split(\":\");\n    if (m_tring[0] !== \"mongodb\") {\n      throw new Error(\n        \"method: `initMongoDatabase` only works for mongodb's mongoose driver for this current version of owl.js. If you want to initialize another database then pass it to the 'initMiddlewares' method\"\n      );\n    }\n\n    if (this.env !== \"production\") {\n      set(\"strictQuery\", true);\n    }\n    // establish database connection\n    // TODO: fix bug here\n    const mongoRun = () => {\n      try {\n        const result = async () => await connect(url, options);\n        if (result) {\n          this.logger.logger.info(\"== MongoDb connected! ==\");\n        }\n      } catch (error) {\n        this.logger.logger.error(error);\n      }\n    };\n    mongoRun();\n  }\n\n  public initMiddlewares() {\n    if (this.env !== \"test\") {\n      this.app.use(this.morgan.successHandler);\n      this.app.use(this.morgan.errorHandler);\n    }\n\n    // parse json request body\n    this.app.use(express.json());\n    // parse urlencoded request body\n    this.app.use(express.urlencoded({ extended: true }));\n  }\n\n  // map through all the routes and register them to the app\n  private initRoutes(routes: OwlRoute[]) {\n    routes.forEach((route) => {\n      this.app.use(\"/\", route.router);\n    });\n  }\n\n  private ErrorHandling() {\n    // converts error to {ErrorRes}\n    this.app.use(this.errorFactory.errorConverter);\n    // handles actual error\n    this.app.use(this.errorFactory.errorHandler);\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      this.logger.logger.info(` === App running in ${this.env} mode ===`);\n      this.logger.logger.info(`ðŸš€ App listening on port ${this.port}`);\n    });\n  }\n}\n"],"names":["OwlFactory","Server","app","initMongoDatabase","url","options","m_tring","split","Error","env","set","mongoRun","result","connect","logger","info","error","initMiddlewares","use","morgan","successHandler","errorHandler","express","json","urlencoded","extended","initRoutes","routes","forEach","route","router","ErrorHandling","errorFactory","errorConverter","listen","port","constructor","nodeEnv","mongo","ErrorFactory","Logger","MorganFactory"],"mappings":"AAAA;;;;+BASaA;;aAAAA;;gDATwB;0BACR;4BAEC;uBACD;wBACN;;;;;;AAIhB,IAAA,AAAMA,aAAN,MAAMA;IAgCJC,SAAS;QACd,OAAO,IAAI,CAACC,GAAG;IACjB;IAGOC,kBAAkBC,GAAW,EAAEC,OAAY,EAAE;QAElD,MAAMC,UAAUF,IAAIG,KAAK,CAAC;QAC1B,IAAID,OAAO,CAAC,EAAE,KAAK,WAAW;YAC5B,MAAM,IAAIE,MACR,oMACA;QACJ,CAAC;QAED,IAAI,IAAI,CAACC,GAAG,KAAK,cAAc;YAC7BC,IAAAA,aAAG,EAAC,eAAe,IAAI;QACzB,CAAC;QAGD,MAAMC,WAAW,IAAM;YACrB,IAAI;gBACF,MAAMC,SAAS,UAAY,MAAMC,IAAAA,iBAAO,EAACT,KAAKC;gBAC9C,IAAIO,QAAQ;oBACV,IAAI,CAACE,MAAM,CAACA,MAAM,CAACC,IAAI,CAAC;gBAC1B,CAAC;YACH,EAAE,OAAOC,OAAO;gBACd,IAAI,CAACF,MAAM,CAACA,MAAM,CAACE,KAAK,CAACA;YAC3B;QACF;QACAL;IACF;IAEOM,kBAAkB;QACvB,IAAI,IAAI,CAACR,GAAG,KAAK,QAAQ;YACvB,IAAI,CAACP,GAAG,CAACgB,GAAG,CAAC,IAAI,CAACC,MAAM,CAACC,cAAc;YACvC,IAAI,CAAClB,GAAG,CAACgB,GAAG,CAAC,IAAI,CAACC,MAAM,CAACE,YAAY;QACvC,CAAC;QAGD,IAAI,CAACnB,GAAG,CAACgB,GAAG,CAACI,gBAAO,CAACC,IAAI;QAEzB,IAAI,CAACrB,GAAG,CAACgB,GAAG,CAACI,gBAAO,CAACE,UAAU,CAAC;YAAEC,UAAU,IAAI;QAAC;IACnD;IAGQC,WAAWC,MAAkB,EAAE;QACrCA,OAAOC,OAAO,CAAC,CAACC,QAAU;YACxB,IAAI,CAAC3B,GAAG,CAACgB,GAAG,CAAC,KAAKW,MAAMC,MAAM;QAChC;IACF;IAEQC,gBAAgB;QAEtB,IAAI,CAAC7B,GAAG,CAACgB,GAAG,CAAC,IAAI,CAACc,YAAY,CAACC,cAAc;QAE7C,IAAI,CAAC/B,GAAG,CAACgB,GAAG,CAAC,IAAI,CAACc,YAAY,CAACX,YAAY;IAC7C;IAEOa,SAAS;QACd,IAAI,CAAChC,GAAG,CAACgC,MAAM,CAAC,IAAI,CAACC,IAAI,EAAE,IAAM;YAC/B,IAAI,CAACrB,MAAM,CAACA,MAAM,CAACC,IAAI,CAAC,CAAC,oBAAoB,EAAE,IAAI,CAACN,GAAG,CAAC,SAAS,CAAC;YAClE,IAAI,CAACK,MAAM,CAACA,MAAM,CAACC,IAAI,CAAC,CAAC,wBAAyB,EAAE,IAAI,CAACoB,IAAI,CAAC,CAAC;QACjE;IACF;IAtFAC,YACET,MAAkB,EAClBU,OAAe,EACfF,IAAsB,EACtBG,KAAkB,CAClB;QACA,IAAI,CAACpC,GAAG,GAAGoB,IAAAA,gBAAO;QAIlB,IAAI,CAACb,GAAG,GAAG4B,WAAW;QACtB,IAAI,CAACF,IAAI,GAAGA,QAAQ;QACpB,IAAI,CAACH,YAAY,GAAG,IAAIO,mBAAY,CAACF;QACrC,IAAI,CAACvB,MAAM,GAAG,IAAI0B,cAAM,CAACH;QACzB,IAAI,CAAClB,MAAM,GAAG,IAAIsB,yBAAa;QAE/B,IAAI,CAACtC,iBAAiB,CAACmC,MAAMlC,GAAG,EAAEkC,MAAMjC,OAAO;QAE/C,IAAI,CAACY,eAAe;QACpB,IAAI,CAACS,UAAU,CAACC;QAChB,IAAI,CAACI,aAAa;IACpB;AAkEF"}